bool MainWindow::txtChange(GdkEventKey* key, Gtk::Entry& entry, bool override)
{
	if(key->keyval == 65288) //Gdk number for backspace
		return false;
	
	int txt_length = entry.get_text_length();
	int txtl_p = txt_length_to_pix(txt_length);
	
	if(entry.get_allocated_width() > txtl_p) //txtbox is big enough already from Mainwindow
		return false;
	
	if(txt_length < kchar_limit_)
		return false;
	
	if(override)
		txt_ans_.set_size_request(entry.get_width() + charToPixals(kchars_width_), -1);
	
	entry.set_size_request(entry.get_width() + charToPixals(kchars_width_), -1);
	
	return false;
}

void MainWindow::txtDelete(int start_pos, int end_pos, Gtk::Entry& entry, bool override)
{
	int txt_length = entry.get_text_length();
//		
//	if(txt_length < kchar_limit_)
//		return;
//		
//	if(override)
//		txt_ans_.set_size_request(entry.get_width() - charToPixals(kchars_width_), -1);
//	
//	entry.set_size_request(entry.get_width() - charToPixals(kchars_width_), -1);
		
	if(txt_length < kchar_limit_)
		entry.set_size_request(default_txtbox_size_, -1);
}

inline cint MainWindow::charToPixals(cint chars) const
{
	return kavg_char_size * chars;
}

void MainWindow::boxMainChange(Gtk::Allocation& a)
{
//	if(txt_length_to_pix(txt_exp_.get_text_length()) > txt_exp_.get_width())
//		return;
	
	if(update_text_ == true)
	{
		update_text_ = false;
		return;
	}
	
	if(win_width_ < get_width())
	{
		//todo: with a loop?
		txt_exp_.set_size_request(txt_exp_.get_width() + getSize(a.get_width() - win_width_), -1);
		txt_ans_.set_size_request(txt_ans_.get_width() + getSize(a.get_width() - win_width_), -1);
		win_width_ = a.get_width();
	}
	else if (win_width_ > get_width())
	{
		txt_exp_.set_size_request(txt_exp_.get_width() - getSize(win_width_ - a.get_width()), -1);
		txt_ans_.set_size_request(txt_ans_.get_width() - getSize(win_width_ - a.get_width()), -1);
		win_width_ = a.get_width();
	}

}

Gtk::TextBuffer::iterator it = buffer_input_->begin();
	Glib::RefPtr<Gtk::TextChildAnchor> refAnchor = buffer_input_->create_child_anchor(it);
	Gtk::Label* lbl = Gtk::manage(new Gtk::Label("> "));
	txt_view_i_.add_child_at_anchor(*lbl, refAnchor);
	
//void MainWindow::setWidthChars(Gtk::Entry& entry)
//{
//	if(entry.get_text_length() < kchar_limit_)
//	{
//		entry.set_width_chars(kchar_limit_);
//		return;
//	}
//	
//	//Todo: bug: plus char doesn't work well
//	entry.set_width_chars(entry.get_text_length());
//	
//	update_text_ = true;
//}

inline cint MainWindow::getSize(int diff) const
{
	if(diff == 1)
		return 1;
	else if(diff < 6)
		return 2;
	else if(diff < 11)
		return 3;
	else if(diff < 21)
		return 10;
	else if(diff < 31)
		return 25;
	else if(diff < 41)
		return 35;
	else if(diff < 51)
		return 40;
	else
		return 60;
	
}

inline cint MainWindow::txt_length_to_pix(cint txt_length) const
{
	return txt_length * 12;
}


void MainWindow::setMark(const Gtk::TextBuffer::iterator& it, const Glib::RefPtr<Gtk::TextBuffer::Mark>& mark, Gtk::TextView* txt_view)
{
	if(it.get_offset() < 2)
		txt_view->set_editable(false);
	else
		txt_view->set_editable(true);
	
	//std::cout << "offset: " << it.get_offset() << std::endl;
}

void MainWindow::setMarkerTag()
{
	tag_ = Gtk::TextBuffer::Tag::create();
	tag_->property_editable() = false;
	Gdk::RGBA color_purple(ColorsHTML::kDPurple());
	tag_->property_foreground_rgba() = color_purple;
	tag_table_ = Gtk::TextBuffer::TagTable::create();
	tag_table_->add(tag_);
}

	//setMarkerTag();
	//buffer_mark_ = Gtk::TextBuffer::create(tag_table_);
	//txt_view_mark_->set_buffer(buffer_mark_);
	//buffer_mark_->insert_with_tag(buffer_mark_->begin(), kexp_marker_, tag_);
	

		if(std::isdigit(str.at(i)))
		{
			nchr = str.at(i+1);
			lchr = str.at(i-1);
			
			if(std::isdigit(nchr.at(0)))
				nchrn = true;
			else
				nchrn = false;
			
			if(std::isdigit(lchr.at(0)))
				lchrn = true;
			else
				lchrn = false;
			
			if(!lchrn)
				it = txtbuffer_->get_iter_at_offset(i-1);
			else if(!nchrn)
			{
				it2 = txtbuffer_->get_iter_at_offset(i);
				txtbuffer_->apply_tag(tag_, it, it2);
			}
		}
	
